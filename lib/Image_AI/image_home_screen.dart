// ignore_for_file: use_build_context_synchronously, deprecated_member_use, avoid_print

import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:personalassistant/Image_AI/api_services.dart';
import 'package:screenshot/screenshot.dart';
import 'package:share_plus/share_plus.dart';

class ImageHomeScreen extends StatefulWidget {
  const ImageHomeScreen({Key? key}) : super(key: key);

  @override
  State<ImageHomeScreen> createState() => _ImageHomeScreenState();
}

class _ImageHomeScreenState extends State<ImageHomeScreen> {
  var sizes = ["Small", "Medium", "Large"];
  var values = ["256x256", "512x512", "1024x1024"];
  String? dropValue;
  var textController = TextEditingController();
  String image = "";
  var isLoaded = false;
  ScreenshotController screenshotController = ScreenshotController();

  Future<void> downloadImage() async {
  var result = await Permission.storage.request();
  if (result.isGranted) {
    const folderName = "AI Image";
    final directory = await getExternalStorageDirectory();

    if (directory != null) {
      final path = "${directory.path}/$folderName";
      final fileName = "${DateTime.now().millisecondsSinceEpoch}.png";
      try {
        await Directory(path).create(recursive: true);
        final filePath = "$path/$fileName";

        await screenshotController.captureAndSave(
          filePath,
          delay: const Duration(milliseconds: 100),
          pixelRatio: 1.0,
        );

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Image Downloaded to $filePath")),
        );
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("Failed to download image")),
        );
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Failed to access storage")),
      );
    }
  } else {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text("Permission Denied")),
    );
  }
}

  Future<void> shareImage() async {
    await screenshotController
        .capture(delay: const Duration(milliseconds: 100), pixelRatio: 1.0)
        .then((Uint8List? img) async {
      if (img != null) {
        final directory = (await getApplicationDocumentsDirectory()).path;
        const fileName = "share.png";
        final imgPath = await File("$directory/$fileName").create();
        await imgPath.writeAsBytes(img);

        Share.shareFiles([imgPath.path], text: "Generated by AI");
      } else {
        print("Failed to take a screenshot");
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(
        
        centerTitle: true,
        title: const Text(
          "AI Image Generator",
          style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            Expanded(
              child: Column(
                children: [
                  Row(
                    children: [
                      Expanded(
                        child: Container(
                          height: 44,
                          padding: const EdgeInsets.symmetric(
                              horizontal: 16, vertical: 4),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: TextFormField(
                            controller: textController,
                            style: const TextStyle(color: Colors.black),
                            decoration: const InputDecoration(
                              hintText: "Eg: A monkey in space",
                              hintStyle: TextStyle(color: Colors.black),
                              border: InputBorder.none,
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(
                        width: 12,
                      ),
                      Container(
                        height: 44,
                        padding: const EdgeInsets.symmetric(
                            vertical: 2, horizontal: 8),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: DropdownButton(
                          dropdownColor: Colors.white,
                          value: dropValue,
                          icon: const Icon(
                            Icons.expand_more,
                            color: Colors.black,
                          ),
                          hint: const Text("Select Size",style: TextStyle(color: Colors.black),),
                          items: List.generate(
                            sizes.length,
                            (index) => DropdownMenuItem(
                              value: values[index],
                              child: Text(sizes[index],style: const TextStyle(color: Colors.black),),
                            ),
                          ),
                          onChanged: (values) {
                            setState(() {
                              dropValue = values.toString();
                            });
                          },
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(
                    height: 30,
                  ),
                  SizedBox(
                    width: 300,
                    height: 50,
                    child: ElevatedButton(
                      onPressed: () async {
                        if (textController.text.isNotEmpty &&
                            dropValue != null) {
                          setState(() {
                            isLoaded = false;
                          });
                          image = await Api.generateImage(
                            textController.text,
                            dropValue!,
                          );
                          setState(() {
                            isLoaded = true;
                          });
                        } else {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                              content:
                                  Text("Please enter text and select size"),
                            ),
                          );
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green,
                        shape: const StadiumBorder(),
                      ),
                      child: const Text("Generate Image"),
                    ),
                  ),
                ],
              ),
            ),
            Expanded(
              flex: 4,
              child: isLoaded
                  ? Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Container(
                          clipBehavior: Clip.antiAlias,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Screenshot(
                            controller: screenshotController,
                            child: Image.network(
                              image,
                              fit: BoxFit.contain,
                            ),
                          ),
                        ),
                        const SizedBox(
                          height: 12,
                        ),
                        Row(
                          children: [
                            Expanded(
                              child: SizedBox(
                                height: 45,
                                child: ElevatedButton.icon(
                                  icon: const Icon(
                                    Icons.download_for_offline_rounded,
                                  ),
                                  style: ElevatedButton.styleFrom(
                                    padding: const EdgeInsets.all(8.0),
                                    backgroundColor: Colors.green,
                                  ),
                                  onPressed: () async {
                                    await downloadImage();
                                  },
                                  label: const Text("Download"),
                                ),
                              ),
                            ),
                            const SizedBox(
                              width: 12,
                            ),
                            SizedBox(
                              height: 45,
                              child: ElevatedButton.icon(
                                icon: const Icon(Icons.share),
                                style: ElevatedButton.styleFrom(
                                  padding: const EdgeInsets.all(8.0),
                                  backgroundColor: Colors.green,
                                ),
                                onPressed: () async {
                                  await shareImage();
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    const SnackBar(
                                      content: Text("Image shared"),
                                    ),
                                  );
                                },
                                label: const Text("Share"),
                              ),
                            ),
                          ],
                        ),
                      ],
                    )
                  : Container(
                      alignment: Alignment.center,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        color: Colors.white,
                      ),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: const [
                          Icon(
                            Icons.hourglass_empty,
                            color: Colors.black,
                            size: 100,
                          ),
                          SizedBox(
                            height: 12,
                          ),
                          Text("Waiting for image to be generated",style: TextStyle(color: Colors.black),),
                        ],
                      ),
                    ),
            ),
          ],
        ),
      ),
    );
  }
}
